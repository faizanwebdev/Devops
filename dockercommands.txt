yum update -y #first to update the OS (amazon OS or redhat OS)
apt-get update -y #first to update the OS (Ubuntu OS or debian family OS)
yum install docker -y #to install docker software
docker info #to check docker software information
docker --version #to check version
service docker status #to check status of docker service or docker daemon
service docker start #to start docker service
service docker restart #to restart docker service
service docker stop #to stop docker service
docker images #to list out all docker images present in system
docker image ls #same output as above command
docker ps #to list out running docker container
docker ps -a #to list out all docker container irrespesctive of it state whether it is running or stop
docker start <containername> #to start docker container
docker attach <containername> #to get inside the docker container
docker stop <containername> #to stop the running docker container
exit #to stop and comeout of docker container
docker pull <imagename> #to pull or download the software or image from docker hub
docker search <imagename> #to search and list out all software or image related to search image from docker hub
docker rename <containername> <newcontainername> #to rename existing container name
docker run -it <imagename> /bin/bash #to pull the image and create, start and attach the container
docker run -it --name <containername> <imagename> /bin/bash #same like above command by giving the name to container
docker rm <containername> #to delete or remove the container
docker rmi <imagename> #to delete or remove the image
docker commit <existingcontainername> <newimagename> #to create image of existing container
docker build -t <newimagename> .    #to build image with help of Dockerfile
#########################
DOCKERFILE commands or rules or variables below:
FROM <imagename>
RUN <commands to perform>
COPY <compy file from base system to newimage and container>
ENV <to declare enviroment variable>
WORKDIR <directly go to specific directory of the image and container>
VOLUME ["path with volumename"] #to declare volume using docker file
#########################
docker run -it --name <containername> -v <path along with volumename> <imagename> /bin/bash #to declare volume along with container creation
docker run -it --name <containername> --privileged=true --volumes-from <containername> <imagename> /bin/bash #to declare and mapping the volume from one container to another container i.e container-to-container volume mapping
docker run -it --name <containername> -v <path along with volume or directory name>:<path along with volumename> <imagename> /bin/bash #to declare and mapping the volume from host system to container i.e host-to-container volume mapping
docker inspect <containername> #to see in depth detail and information of container
docker rm $(docker ps -a -q) #to remove all container
docker stop $(docker ps -a -q) #to stop all container
docker rmi $(docker images -q) #to delete all images
docker rmi -f $(docker images -q) #to forcefully delete all images
docker run -td --name <containername> -p (host port number for example 80):(container port number for example 80) <imagename> #to create non-interactive container with port (-p denote port, -d denotes daemon or detach). This command will automaticall start the container in background
docker exec -it <noninteractive containername> /bin/bash #to get inside or to interact with noninteractive container
docker login #to login into docker hub account
docker tag <existing imagename> <dockerhubaccountname>/<imagename for dockerhub> #for reserving space for image to push on dockerhub
docker push <dockerhubaccountname>/<imagename for dockerhub to be push> #to push image on dockerhub
docker pull <imagename> #to pull image from dockerhub (if it is private image or repo so we wil have to login into dockerhub using docker login account)
